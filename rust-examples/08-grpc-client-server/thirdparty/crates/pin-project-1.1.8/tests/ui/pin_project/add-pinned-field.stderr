error[E0277]: `PhantomPinned` cannot be unpinned
  --> tests/ui/pin_project/add-pinned-field.rs:23:16
   |
23 |     is_unpin::<Foo>(); //~ ERROR E0277
   |                ^^^ within `__Foo<'_>`, the trait `Unpin` is not implemented for `PhantomPinned`
   |
   = note: consider using the `pin!` macro
           consider using `Box::pin` if you need to access the pinned value outside of the current scope
note: required because it appears within the type `__Foo<'_>`
  --> tests/ui/pin_project/add-pinned-field.rs:10:8
   |
10 | struct Foo {
   |        ^^^
note: required for `Foo` to implement `Unpin`
  --> tests/ui/pin_project/add-pinned-field.rs:8:1
   |
8  | #[pin_project]
   | ^^^^^^^^^^^^^^ unsatisfied trait bound introduced in this `derive` macro
9  | #[add_pinned_field]
10 | struct Foo {
   |        ^^^
note: required by a bound in `is_unpin`
  --> tests/ui/pin_project/add-pinned-field.rs:6:16
   |
6  | fn is_unpin<T: Unpin>() {}
   |                ^^^^^ required by this bound in `is_unpin`
   = note: this error originates in the derive macro `::pin_project::__private::__PinProjectInternalDerive` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: `PhantomPinned` cannot be unpinned
  --> tests/ui/pin_project/add-pinned-field.rs:24:16
   |
24 |     is_unpin::<Bar>(); //~ ERROR E0277
   |                ^^^ within `__Bar<'_>`, the trait `Unpin` is not implemented for `PhantomPinned`
   |
   = note: consider using the `pin!` macro
           consider using `Box::pin` if you need to access the pinned value outside of the current scope
note: required because it appears within the type `__Bar<'_>`
  --> tests/ui/pin_project/add-pinned-field.rs:17:8
   |
17 | struct Bar {
   |        ^^^
note: required for `Bar` to implement `Unpin`
  --> tests/ui/pin_project/add-pinned-field.rs:16:1
   |
16 | #[pin_project]
   | ^^^^^^^^^^^^^^ unsatisfied trait bound introduced in this `derive` macro
17 | struct Bar {
   |        ^^^
note: required by a bound in `is_unpin`
  --> tests/ui/pin_project/add-pinned-field.rs:6:16
   |
6  | fn is_unpin<T: Unpin>() {}
   |                ^^^^^ required by this bound in `is_unpin`
   = note: this error originates in the derive macro `::pin_project::__private::__PinProjectInternalDerive` (in Nightly builds, run with -Z macro-backtrace for more info)
