# THIS FILE IS AUTOMATICALLY GENERATED BY CARGO
#
# When uploading crates to the registry Cargo will automatically
# "normalize" Cargo.toml files for maximal compatibility
# with all versions of Cargo and also rewrite `path` dependencies
# to registry (e.g., crates.io) dependencies.
#
# If you are reading this file be aware that the original Cargo.toml
# will likely look very different (and much more reasonable).
# See Cargo.toml.orig for the original contents.

[package]
edition = "2021"
rust-version = "1.63"
name = "rustix"
version = "0.38.44"
authors = [
    "Dan Gohman <dev@sunfishcode.online>",
    "Jakub Konka <kubkon@jakubkonka.com>",
]
build = "build.rs"
include = [
    "src",
    "build.rs",
    "Cargo.toml",
    "COPYRIGHT",
    "LICENSE*",
    "/*.md",
    "benches",
]
autolib = false
autobins = false
autoexamples = false
autotests = false
autobenches = false
description = "Safe Rust bindings to POSIX/Unix/Linux/Winsock-like syscalls"
documentation = "https://docs.rs/rustix"
readme = "README.md"
keywords = [
    "api",
    "file",
    "network",
    "safe",
    "syscall",
]
categories = [
    "os::unix-apis",
    "date-and-time",
    "filesystem",
    "network-programming",
]
license = "Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT"
repository = "https://github.com/bytecodealliance/rustix"

[package.metadata.docs.rs]
features = ["all-apis"]
targets = [
    "x86_64-unknown-linux-gnu",
    "i686-unknown-linux-gnu",
    "x86_64-apple-darwin",
    "x86_64-pc-windows-msvc",
    "x86_64-unknown-freebsd",
    "x86_64-unknown-openbsd",
    "x86_64-unknown-netbsd",
    "x86_64-unknown-dragonfly",
    "x86_64-unknown-illumos",
    "x86_64-unknown-redox",
    "x86_64-unknown-haiku",
    "wasm32-unknown-emscripten",
    "wasm32-wasip1",
]

[lib]
name = "rustix"
path = "src/lib.rs"

[[bench]]
name = "mod"
path = "benches/mod.rs"
harness = false

[dependencies.bitflags]
version = "2.4.0"
default-features = false

[dependencies.compiler_builtins]
version = "0.1.49"
optional = true

[dependencies.core]
version = "1.0.0"
optional = true
package = "rustc-std-workspace-core"

[dependencies.itoa]
version = "1.0.13"
optional = true
default-features = false

[dependencies.rustc-std-workspace-alloc]
version = "1.0.0"
optional = true

[dev-dependencies.flate2]
version = "1.0"

[dev-dependencies.libc]
version = "0.2.161"

[dev-dependencies.libc_errno]
version = "0.3.10"
default-features = false
package = "errno"

[dev-dependencies.memoffset]
version = "0.9.0"

[dev-dependencies.serial_test]
version = "2.0.0"

[dev-dependencies.static_assertions]
version = "1.1.0"

[dev-dependencies.tempfile]
version = "3.5.0"

[features]
all-apis = [
    "event",
    "fs",
    "io_uring",
    "mm",
    "mount",
    "net",
    "param",
    "pipe",
    "process",
    "procfs",
    "pty",
    "rand",
    "runtime",
    "shm",
    "stdio",
    "system",
    "termios",
    "thread",
    "time",
]
alloc = []
cc = []
default = [
    "std",
    "use-libc-auxv",
]
event = []
fs = []
io_uring = [
    "event",
    "fs",
    "net",
    "linux-raw-sys/io_uring",
]
libc-extra-traits = ["libc?/extra_traits"]
linux_4_11 = []
linux_latest = ["linux_4_11"]
mm = []
mount = []
net = [
    "linux-raw-sys/net",
    "linux-raw-sys/netlink",
    "linux-raw-sys/if_ether",
    "linux-raw-sys/xdp",
]
param = ["fs"]
pipe = []
process = ["linux-raw-sys/prctl"]
procfs = [
    "once_cell",
    "itoa",
    "fs",
]
pty = [
    "itoa",
    "fs",
]
rand = []
runtime = ["linux-raw-sys/prctl"]
rustc-dep-of-std = [
    "core",
    "rustc-std-workspace-alloc",
    "compiler_builtins",
    "linux-raw-sys/rustc-dep-of-std",
    "bitflags/rustc-dep-of-std",
    "compiler_builtins?/rustc-dep-of-std",
]
shm = ["fs"]
std = [
    "bitflags/std",
    "alloc",
    "libc?/std",
    "libc_errno?/std",
    "libc-extra-traits",
]
stdio = []
system = ["linux-raw-sys/system"]
termios = []
thread = ["linux-raw-sys/prctl"]
time = []
try_close = []
use-explicitly-provided-auxv = []
use-libc = [
    "libc_errno",
    "libc",
    "libc-extra-traits",
]
use-libc-auxv = []

[target.'cfg(all(any(target_os = "android", target_os = "linux"), any(rustix_use_libc, miri, not(all(target_os = "linux", any(target_endian = "little", target_arch = "s390x"), any(target_arch = "arm", all(target_arch = "aarch64", target_pointer_width = "64"), target_arch = "riscv64", all(rustix_use_experimental_asm, target_arch = "powerpc64"), all(rustix_use_experimental_asm, target_arch = "s390x"), all(rustix_use_experimental_asm, target_arch = "mips"), all(rustix_use_experimental_asm, target_arch = "mips32r6"), all(rustix_use_experimental_asm, target_arch = "mips64"), all(rustix_use_experimental_asm, target_arch = "mips64r6"), target_arch = "x86", all(target_arch = "x86_64", target_pointer_width = "64")))))))'.dependencies.linux-raw-sys]
version = "0.4.14"
features = [
    "general",
    "ioctl",
    "no_std",
]
default-features = false

[target.'cfg(all(criterion, not(any(target_os = "emscripten", target_os = "wasi"))))'.dev-dependencies.criterion]
version = "0.4"

[target.'cfg(all(not(rustix_use_libc), not(miri), target_os = "linux", any(target_endian = "little", target_arch = "s390x"), any(target_arch = "arm", all(target_arch = "aarch64", target_pointer_width = "64"), target_arch = "riscv64", all(rustix_use_experimental_asm, target_arch = "powerpc64"), all(rustix_use_experimental_asm, target_arch = "s390x"), all(rustix_use_experimental_asm, target_arch = "mips"), all(rustix_use_experimental_asm, target_arch = "mips32r6"), all(rustix_use_experimental_asm, target_arch = "mips64"), all(rustix_use_experimental_asm, target_arch = "mips64r6"), target_arch = "x86", all(target_arch = "x86_64", target_pointer_width = "64"))))'.dependencies.libc]
version = "0.2.161"
optional = true
default-features = false

[target.'cfg(all(not(rustix_use_libc), not(miri), target_os = "linux", any(target_endian = "little", target_arch = "s390x"), any(target_arch = "arm", all(target_arch = "aarch64", target_pointer_width = "64"), target_arch = "riscv64", all(rustix_use_experimental_asm, target_arch = "powerpc64"), all(rustix_use_experimental_asm, target_arch = "s390x"), all(rustix_use_experimental_asm, target_arch = "mips"), all(rustix_use_experimental_asm, target_arch = "mips32r6"), all(rustix_use_experimental_asm, target_arch = "mips64"), all(rustix_use_experimental_asm, target_arch = "mips64r6"), target_arch = "x86", all(target_arch = "x86_64", target_pointer_width = "64"))))'.dependencies.libc_errno]
version = "0.3.10"
optional = true
default-features = false
package = "errno"

[target.'cfg(all(not(rustix_use_libc), not(miri), target_os = "linux", any(target_endian = "little", target_arch = "s390x"), any(target_arch = "arm", all(target_arch = "aarch64", target_pointer_width = "64"), target_arch = "riscv64", all(rustix_use_experimental_asm, target_arch = "powerpc64"), all(rustix_use_experimental_asm, target_arch = "s390x"), all(rustix_use_experimental_asm, target_arch = "mips"), all(rustix_use_experimental_asm, target_arch = "mips32r6"), all(rustix_use_experimental_asm, target_arch = "mips64"), all(rustix_use_experimental_asm, target_arch = "mips64r6"), target_arch = "x86", all(target_arch = "x86_64", target_pointer_width = "64"))))'.dependencies.linux-raw-sys]
version = "0.4.14"
features = [
    "general",
    "errno",
    "ioctl",
    "no_std",
    "elf",
]
default-features = false

[target.'cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = "linux", any(target_endian = "little", target_arch = "s390x"), any(target_arch = "arm", all(target_arch = "aarch64", target_pointer_width = "64"), target_arch = "riscv64", all(rustix_use_experimental_asm, target_arch = "powerpc64"), all(rustix_use_experimental_asm, target_arch = "s390x"), all(rustix_use_experimental_asm, target_arch = "mips"), all(rustix_use_experimental_asm, target_arch = "mips32r6"), all(rustix_use_experimental_asm, target_arch = "mips64"), all(rustix_use_experimental_asm, target_arch = "mips64r6"), target_arch = "x86", all(target_arch = "x86_64", target_pointer_width = "64")))))))'.dependencies.libc]
version = "0.2.161"
default-features = false

[target.'cfg(all(not(windows), any(rustix_use_libc, miri, not(all(target_os = "linux", any(target_endian = "little", target_arch = "s390x"), any(target_arch = "arm", all(target_arch = "aarch64", target_pointer_width = "64"), target_arch = "riscv64", all(rustix_use_experimental_asm, target_arch = "powerpc64"), all(rustix_use_experimental_asm, target_arch = "s390x"), all(rustix_use_experimental_asm, target_arch = "mips"), all(rustix_use_experimental_asm, target_arch = "mips32r6"), all(rustix_use_experimental_asm, target_arch = "mips64"), all(rustix_use_experimental_asm, target_arch = "mips64r6"), target_arch = "x86", all(target_arch = "x86_64", target_pointer_width = "64")))))))'.dependencies.libc_errno]
version = "0.3.10"
default-features = false
package = "errno"

[target.'cfg(any(target_os = "android", target_os = "linux"))'.dependencies.once_cell]
version = "1.5.2"
optional = true

[target."cfg(windows)".dependencies.libc_errno]
version = "0.3.10"
default-features = false
package = "errno"

[target."cfg(windows)".dependencies.windows-sys]
version = ">=0.52, <=0.59"
features = [
    "Win32_Foundation",
    "Win32_Networking_WinSock",
    "Win32_NetworkManagement_IpHelper",
    "Win32_System_Threading",
]

[lints.rust.unexpected_cfgs]
level = "warn"
priority = 0
check-cfg = [
    "cfg(alloc_c_string)",
    "cfg(alloc_ffi)",
    "cfg(apple)",
    "cfg(asm_experimental_arch)",
    "cfg(bsd)",
    "cfg(core_c_str)",
    "cfg(core_ffi_c)",
    "cfg(core_intrinsics)",
    "cfg(criterion)",
    "cfg(document_experimental_runtime_api)",
    "cfg(fix_y2038)",
    "cfg(freebsdlike)",
    "cfg(libc)",
    "cfg(linux_kernel)",
    "cfg(linux_like)",
    "cfg(linux_raw)",
    "cfg(netbsdlike)",
    "cfg(rustc_attrs)",
    "cfg(solarish)",
    "cfg(staged_api)",
    "cfg(static_assertions)",
    "cfg(thumb_mode)",
    "cfg(wasi)",
    "cfg(wasi_ext)",
    'cfg(target_arch, values("xtensa"))',
]
