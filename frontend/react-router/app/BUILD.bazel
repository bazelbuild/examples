load("@aspect_bazel_lib//lib:copy_file.bzl", "copy_file")
load("@aspect_bazel_lib//lib:directory_path.bzl", "directory_path")
load("@aspect_rules_js//js:defs.bzl", "js_library")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("//:vitest.bzl", "vitest")
load("//react-router:defs.bzl", "ASSET_PATTERNS", "SRC_PATTERNS", "TEST_PATTERNS", "TRANSPILER")

js_library(
    name = "assets",
    srcs = glob(ASSET_PATTERNS),
    visibility = ["//react-router:__subpackages__"],
)

js_library(
    name = "srcs",
    srcs = glob(SRC_PATTERNS),
    visibility = ["//react-router:__subpackages__"],
)

#############
# WORKAROUND for this react-router codegen pattern.
# https://reactrouter.com/how-to/route-module-type-safety relies on TypeScript "rootDirs" feature to make
# two different physical folders be "merged" into a logical folder within the TypeScript Program.
# This allows a cycle: the generated files in the +types folder to reference our sources, and our sources reference those files.
# Alex: I studied this a bit, though my knowledge is rusty.
# Under Bazel, we expect the `ts_project` rule can control the rootDir, and that the graph is acyclic, so this shape doesn't work.
# The simple answer is to use Bazel actions to actually merge the two folders together, so by the time the Type-Checker produces a Program,
# there's no longer a need for rootDirs.
# The downside is that we have to enumerate all the generated files here, and the boilerplate of copying them.
GENERATED_TYPES = [
    "+types/root.ts",
    "routes/+types/home.ts",
]

# Reference files within the genereted typegen folder
[
    directory_path(
        name = "path_to_type{}".format(i),
        directory = "//react-router:typegen",
        path = "types/app/" + p,
    )
    for (i, p) in enumerate(GENERATED_TYPES)
]

# Copy those files as if they were part of the source tree.
[
    copy_file(
        name = "copy_type{}".format(i),
        src = "path_to_type{}".format(i),
        out = p,
    )
    for (i, p) in enumerate(GENERATED_TYPES)
]

ts_project(
    name = "app",
    srcs = glob(
        include = SRC_PATTERNS,
        allow_empty = True,
        exclude = TEST_PATTERNS,
    ) + [
        ":copy_type{}".format(i)
        for i in range(len(GENERATED_TYPES))
    ],
    data = [
        ":assets",
    ],
    declaration = True,
    resolve_json_module = True,
    transpiler = TRANSPILER,
    tsconfig = "//react-router:tsconfig",
    visibility = ["//react-router:__subpackages__"],
    deps = [
        "//react-router:node_modules/@react-router/dev",
        "//react-router:node_modules/@react-router/node",
        "//react-router:node_modules/@types/node",
        "//react-router:node_modules/@types/react",
        "//react-router:node_modules/isbot",
        "//react-router:node_modules/react",
        "//react-router:node_modules/react-dom",
        "//react-router:node_modules/react-router",
        "//react-router:node_modules/vite",
    ],
)

ts_project(
    name = "test_lib",
    srcs = glob(
        TEST_PATTERNS,
        allow_empty = True,
    ),
    declaration = True,
    resolve_json_module = True,
    transpiler = TRANSPILER,
    tsconfig = "//react-router:tsconfig",
    deps = [
        ":app",
        "//:node_modules/vitest",
        "//react-router:node_modules/@testing-library/jest-dom",
        "//react-router:node_modules/@testing-library/react",
        "//react-router:node_modules/@types/jest",
    ],
)

vitest(
    name = "test",
    config = "//react-router:vite.config",
    deps = [":test_lib"],
)
